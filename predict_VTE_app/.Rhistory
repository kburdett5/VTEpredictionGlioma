#===================================================================#
dat2 <- labeldat %>% dplyr::select(record_id, basevars, vtevars) %>%
dplyr::mutate(who_surg_orig = as.character(who_surg_orig)) %>%
dplyr::mutate(Smoker = ifelse(smoking_diag_orig == "Current smoker", "Current", "Never or Former"),
plt_diag_orig = plt_diag_orig/10,
wbc_diag_orig = wbc_diag_orig/10,
who_surg_orig = dplyr::recode(who_surg_orig, !!!c("2" = "II" , "3" = "III", "4" = "IV"))) %>%  #* scale WBC and platelet by 10
dplyr::select(-smoking_diag_orig) %>%
dplyr::mutate(sex = factor(sex, levels = c("Male","Female")),
race = factor(race, levels = c("White","Black or African American","Asian", "American Indian or Alaska Native","Native Hawaiian or Other Pacific Islander","Multiracial","Other")),
ethnicity = factor(ethnicity, levels = c("Hispanic or Latino","Non-Hispanic or Non-Latino")),
Smoker = factor(Smoker, levels = c("Never or Former","Current")),
med_hx_htn = factor(med_hx_htn, levels = c("No","Yes")),
med_hx_hlp = factor(med_hx_hlp, levels = c("No","Yes")),
med_hx_asthma = factor(med_hx_asthma, levels = c("No","Yes")),
med_hx_hthyr = factor(med_hx_hthyr, levels = c("No","Yes")),
med_hx_vte = factor(med_hx_vte, levels = c("No","Yes")),
med_hx_bcd = factor(med_hx_bcd, levels = c("No","Yes")),
mm_idh = factor(mm_idh, levels = c("No","Yes")),
mm_1p19q_codel = factor(mm_1p19q_codel, levels = c("No","Yes")),
mm_mgmt_meth = factor(mm_mgmt_meth, levels =c("No","Yes")),
mm_egfr_ampmut = factor(mm_egfr_ampmut, levels = c("No","Yes")),
tmz_orig = factor(tmz_orig, levels = c("No","Yes")),
rt_orig = factor(rt_orig, levels = c("No","Yes")),
bev_orig = factor(bev_orig, levels = c("No","Yes")),
med_hx_bcd = factor(med_hx_bcd, levels = c("No","Yes")),
who_surg_orig = factor(who_surg_orig),
hist_surg_orig = factor(hist_surg_orig, levels = c("Astrocytoma (includes glioblastoma)", "Oligodendroglioma"))) %>%
dplyr::rename(Subject = record_id, Age = age_diag_orig, Sex = sex, BMI = bmi_diag_orig,
Race = race, Ethnicity = ethnicity,
"Platelet_count" = plt_diag_orig, "WBCcount" = wbc_diag_orig,
Hemoglobin = hg_diag_orig, Hypertension = med_hx_htn,"Hyperlipidemia" = med_hx_hlp,
"Asthma" = med_hx_asthma, "Hypothyroidism" = med_hx_hthyr,  "History_VTE" = med_hx_vte,
"Blood_coagulation_disorder" = med_hx_bcd, "IDH" = mm_idh,
"codeletion_1p19q" = mm_1p19q_codel, "MGMT" =mm_mgmt_meth,
"EGFR" =mm_egfr_ampmut , Temozolomide = tmz_orig, Radiotherapy = rt_orig,
Bevacizumab = bev_orig, WHOgrade = who_surg_orig, Histology = hist_surg_orig, Length_Hospital_Stay = los_surg_orig )
# dat2 %>% dplyr::select(Subject, n_surg_recur, num_vte, dt_surg_orig, dt_surg_recur_1, dt_vte_1, VTE1priorRecur) %>% head(15) %>% print(n=Inf)
cleanBaseVars <- c("Age", "Sex", "Race", "Ethnicity", "WHOgrade", "Histology", "Smoker", "Length_Hospital_Stay",
"BMI", "History_VTE", "Radiotherapy", "Temozolomide", "Bevacizumab", "Hemoglobin", "Platelet_count",
"WBCcount", "Hypertension", "Hyperlipidemia", "Asthma", "Hypothyroidism", "Blood_coagulation_disorder",
"IDH", "codeletion_1p19q", "MGMT", "EGFR")
```
```{r}
#====== Survival endpoints =========#
dat3 <- dat2 %>%
dplyr::mutate(VTE1priorRecur = as.Date(ifelse(dt_vte_1 < dt_surg_recur_1 | is.na(dt_surg_recur_1), dt_vte_1, NA), origin = "1970-01-01")) %>%
dplyr::mutate(Death = ifelse(status_lfu == "Deceased", 1, 0),
iVTE = ifelse(!is.na(VTE1priorRecur), 1, 0),
VTEnew = as.Date(ifelse(!is.na(VTE1priorRecur), VTE1priorRecur, date_lfu), origin = "1970-01-01"),
VTE_months = as.numeric(VTEnew - dt_surg_orig) / 365.25 * 12)
# kable(dat3 %>% dplyr::select(Subject, Surgery = dt_surg_orig, "VTE1"= dt_vte_1  , "Surgery Recur1"= dt_surg_recur_1, "Follow-Up" = date_lfu, iVTE, VTEnew, "VTE (months)"=  VTE_months) %>% head()
# , "latex", booktabs = TRUE, caption = "Snapshot of time-to-event endpoints") %>%
#   kable_styling(latex_options = c("striped", "scale_down")) %>%
#   footnote(general = "VTE(months) will be used as the time-to-event variable with iVTE as the indicator for whether VTE was observed.",general_title="", threeparttable = TRUE)
#patient with VTEdate before surgery
issue <- dat3 %>% dplyr::select(Subject, status_lfu, date_lfu, dt_surg_orig, iVTE, VTE_months) %>% dplyr::filter(VTE_months < 0)
issushow <- issue %>% dplyr::mutate(dt_surg_orig = as.character(dt_surg_orig), date_lfu = as.character(date_lfu))
# kable(issushow, booktabs = TRUE,longtable = TRUE, caption = "VTE date prior to surgery date") %>%
#   kable_styling(latex_options = c("HOLD_position","striped")) %>%
#   footnote(general = "Filter out these subjects with VTE date prior to surgery date in the analyses.",general_title="", threeparttable = TRUE)
```
## Analysis Population
```{r}
###=== Remove subjects that had negative VTEmonths since surgery date is after VTE
analysis <- dat3 %>%
dplyr::filter(VTE_months > 0) %>%
dplyr::select(-VTE1priorRecur, -VTEnew)
pcadatRAW <- analysis %>%
dplyr::mutate(VTE = dplyr::recode(iVTE, !!!c("1" = "Yes VTE", "0"= "No VTE")),
Sex_num = dplyr::recode(Sex , !!!c("Male" = 1,  "Female" = 0)),
Hypertension_num = dplyr::recode(Hypertension, !!!c("Yes" = 1,  "No" = 0)),
Hypothyroidism_num = dplyr::recode(Hypothyroidism, !!!c("Yes" = 1,  "No" = 0)),
IDH_num = dplyr::recode(IDH, !!!c("Yes" = 1,  "No" = 0)),
MGMT_num = dplyr::recode(MGMT, !!!c("Yes" = 1, "No" = 0)),
Temozolomide_num = dplyr::recode(Temozolomide, !!!c("Yes" = 1,  "No" = 0)),
WHOgrade_char = paste0("Grade ", WHOgrade),
WHOgrade_num = ifelse(WHOgrade == "II", 2,
ifelse(WHOgrade == "III", 3,
ifelse(WHOgrade == "IV", 4, NA))))
library(missMDA)
cont_predvars <- c("Age", "BMI", "Sex_num", "WBCcount", "Platelet_count", "Hypertension_num", "Hypothyroidism_num", "IDH_num", "MGMT_num", "Temozolomide_num", "WHOgrade_num")
imputePCAout <- imputePCA(as.data.frame(pcadatRAW[,cont_predvars]), method = "EM", ncp=2)  #impute missing values
pca <- prcomp(imputePCAout$completeObs, center = TRUE, scale. = TRUE)  #get pca object
pcpoints <- data.frame(pcadatRAW$VTE, pca$x)
pcout <- summary(pca)$importance
str(pcpoints)
library(plotly)
pcaplot <- plot_ly(pcpoints, x=~PC1, y=~PC2, z=~PC3,
color = ~pcadatRAW.VTE) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = paste0("PC1 (", round(pcout["Proportion of Variance", "PC1"] *100,1) , "%)")),
yaxis = list(title = paste0("PC2 (", round(pcout["Proportion of Variance", "PC2"] *100,1) , "%)")),
zaxis = list(title = paste0("PC3 (", round(pcout["Proportion of Variance", "PC3"] *100,1) , "%)"))))
pcaplot
save(pcpoints, file= file.path(dir, "/Results/outputfor_RShiny/PCApoints.rda"))
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(tidyverse)
library(plotly)
#library(riskRegression)
library(survival)
library(survminer)
#library(pec)   #for predictSurvProb()
#==========================================================#
#===============        Read in data             ==========#
#==========================================================#
dir <- "/Volumes/fsmresfiles/PrevMed/Projects/Brain_SPORE_BB_Core/Projects/Horbinski/Thrombosis/Code/VTEpredictionGlioma/"
#load in the objects
load(file.path(dir, "predict_VTE_app/VTE_KMplot.rda")) #KM plot "ggsurv1" and "kmplotdat"
#load(file.path(dir, "predict_VTE_app/pcaVTE_VTE.rda")) #pca VTE column "pcaVTE"
load(file.path(dir, "predict_VTE_app/VTE_pcaplot.rda")) #pca plot "pcaplot"
load(file.path(dir, "PCApoints.rda"))  #pcpoints
load(file.path(dir, "predict_VTE_app/VTE_predfit1.rda")) #prediction from original data selected model "predfit1"
load(file.path(dir, "predict_VTE_app/VTE_allWHOplots.rda")) #bar charts by WHO grade "allWHOplots"
#plots are ageWHOgrade, BMIWHOgrade, WBC_WHOgrade, platelet_WHOgrade
catvars <- c("Sex", "Hypertension", "Hypothyroidism", "IDH", "MGMT", "Temozolomide")
contvars <- c("Age", "BMI", "WBCcount", "Platelet_count")
load(file.path(dir, "PCApoints.rda"))  #pcpoints
load(file.path(dir, "predict_VTE_app/PCApoints.rda"))  #pcpoints
plot_ly(pcpoints, x=~PC1, y=~PC2, z=~PC3,
color = ~pcadatRAW.VTE) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = paste0("PC1 (", round(pcout["Proportion of Variance", "PC1"] *100,1) , "%)")),
yaxis = list(title = paste0("PC2 (", round(pcout["Proportion of Variance", "PC2"] *100,1) , "%)")),
zaxis = list(title = paste0("PC3 (", round(pcout["Proportion of Variance", "PC3"] *100,1) , "%)"))))
PCAplotData <- list(pcpoints = pcpoints, pcout = pcout)
save(PCAplotData, file= file.path(dir, "/Results/outputfor_RShiny/PCApoints.rda"))
---
output:
pdf_document:
keep_tex: FALSE
number_sections: TRUE
includes:
in_header: header.tex # remember to include this file when copy the template
geometry: margin=2cm
fontsize: 12pt
mainfont: Times New Roman
graphics: yes
---
```{r setup, include=FALSE}
# Add the packages you are going to use here with require("xxx")
#library(tableone)
library(gridExtra)
library(xtable)          # used for creating latex tables from R object
library(kableExtra)
library(tableone)
library(readxl)
library(knitr)
library(tidyverse)
#library(lubridate)
library(glmnet)          # LASSO
library(mice)            # multiple imputation
library(VIM)             # Missing data visualization
library(broom)
library(survival)
library(survminer)       # for beautiful KM plots
library(survAUC)
library(forestplot)
#options(round = 4)
options(digits = 3)
options(stringsAsFactors = FALSE)
opts_chunk$set(echo = FALSE, warning = FALSE, comment="  ") # Results but not code shown in the finished file
opts_knit$set(root.dir = "./") # Change working directory here
knit_hooks$set(inline = function(x){if(!is.numeric(x)){x} else{prettyNum(x, big.mark = ",")}}) # Format numbers
stdt <- date()
date <- Sys.Date()
dir <- "/Volumes/fsmresfiles/PrevMed/Projects/Brain_SPORE_BB_Core/Projects/Horbinski/Thrombosis/"
alphaval <- 0.05
```
```{r logo,fig.align = 'center', out.width = '50%'}
# There is a bug in MiKTex. We need to wait for an updated version.
# https://github.com/MiKTeX/miktex-packaging/issues/131
include_graphics("FeinbergLogo.png")
```
```{r}
#================ FUNCTIONS ===================#
multi_join <- function(byvar, listdat, joinfun, ...){
require("dplyr")
output <- Reduce(function(x, y) {joinfun(by=byvar, x, y, ...)}, listdat)
return(output)
}
#====== Betas across imputed data =========#
getbetasCox <- function(dat, imputeval, timevar){
imdat <- dat[dat$.imp == imputeval,] %>%
dplyr::select(-.imp, -.id, -Subject)
model_string <- as.formula(paste(" ~", paste(names(imdat)[!names(imdat) %in% c("iVTE", timevar)], collapse = "+")))
x_train <- model.matrix(model_string, imdat)
set.seed(111)
lassocv <- cv.glmnet(x=x_train, y= Surv(imdat[,timevar], imdat$iVTE),
family = "cox",alpha=1, nfolds = 5)
lambda_min <- lassocv$lambda.min  #lambda.min is the value of lambda that gives min mean cross-validated error
#===== pull the betas using the tuning parameter from the 5CV LASSO  =======#
cv_coef <- as.matrix(predict(lassocv, s=lambda_min, type = "coefficient"))
betaout <- tibble(rownames(cv_coef), cv_coef)
names(betaout) <- c("Variable",paste0("Coef_",imputeval))
betaout <- betaout %>% dplyr::filter(!Variable == "(Intercept)")
return(betaout = betaout)
}
#==== function to get out effect size and pvalue from coxph  ====#
HRfun <- function(data, markers,  CIval, roundval){
cform <- coxph(as.formula(paste("Surv(VTE_months, iVTE) ~", markers) ), data)
sum_cform <- summary(cform, conf.int = CIval)                             # coxph survival summary
mytidy <- broom::tidy(cform, conf.int = CIval)
#waldpval <- sum_cform$coefficients[1,"Pr(>|z|)"]                            # gives the Wald pval
aout <- mytidy %>%
dplyr::mutate(HR = round(exp(estimate),roundval),
lCI = round(exp(conf.low),roundval),
uCI = round(exp(conf.high),roundval),
`Pvalue` = sum_cform$coefficients[,"Pr(>|z|)"]) %>%
dplyr::mutate(`HR (CI)` = paste0(HR, " (",lCI,", ",uCI,")")) %>%
dplyr::select("Predictor" = term, HR, lCI, uCI, `HR (CI)`, `Pvalue`)
# #adding a row for overall wald pvalue
# overall_Waldpval <- sum_cform$wald["pvalue"]
# titlerow <- c(markers, "", "", "", "", overall_Waldpval)
# withtitle <- rbind(titlerow, aout)
#
#add a blank row after categorical variables for reference
finalout <-aout %>% mutate(HR= as.numeric(HR),
lCI = as.numeric(lCI),
uCI = as.numeric(uCI),
Pvalue = as.numeric(Pvalue))
return(finalout = finalout)
}
# HRfun(analysis, "WHOgrade", 1-alphaval, 2)
# test <- coxph(Surv(VTE_months, iVTE) ~ WHOgrade, data= analysis)
# summary(test)
# tidy(test)
#==== functino to get counts for categorical and continuous variables
getcountFUN <- function(dat, varin, roundval){
dat <- as.data.frame(dat)
if(is.numeric(dat[,varin]) == TRUE){
Count <- paste0("(N=", sum(!is.na(dat[,varin])), ")")
outnames <- varin
finalo <- data.frame(outnames, Count, stringsAsFactors = FALSE)
#finalo <- rbind(varin, outdat)
} else {
freqs <- round(table(dat[,varin], exclude = NA),roundval)
outnames2 <- names(table(dat[,varin], exclude =NA))
outnames <- paste0(varin, "__",outnames2)
Count <- paste0(outnames2, " (N=", freqs, ")")
finalo <- data.frame(outnames, Count, stringsAsFactors = FALSE)
}
return(finalo=finalo)
}
```
\bcenter
\large__VTE Risk Prediction__
\ecenter
<!-- Fill in the right names, credentials and departments -->
<!-- Current (system) date automatically generated -->
<!-- Fill in the project number and title -->
\begin{tabular}{@{}ll}
To: & Dusten Unruh, Craig Horbinski, Michael Drumm\\
From: & Kirsten Burdett, Denise Scholtens, Biostatistics\\
Date: & `r format(Sys.Date(), "%B %d, %Y")`\\
Subject: & VTE Risk Prediction - Time-to-Event analysis for original glioma subset using \\
& REDCap data.\\
\end{tabular}
<!-- Add a horizontal line -->
\noindent\rule{\textwidth}{1pt}
<!-- Add table of contents -->
\tableofcontents
\newpage
# Background
This report uses the REDCap database "VTE Prediction for Glioma Patients" to investigate factors that may help predict glioma patients who are at high risk for developing thrombotic complications.
\newline
We are interested in risk of venous thromboembolism (VTE) after surgical resection of original glioma.	VTE is usually a sign the tumor is progressing.
## Methods
Venous thromboembolism (VTE) event is defined as deep venous thrombus (DVT) or pulmonary embolus (PE).
- VTE Survival: time from surgical resection of original glioma to time of first VTE calculated in months. Patients will be censored at the time of last follow-up if VTE is not observed.
The regularization method LASSO, along with 5-fold cross-validation to choose the tuning parameter $\lambda$, will be used to determine the model used to predict VTE. Before using LASSO, we will do multiple imputation by chained equations treating the missing data as missing at random (MAR). We will only impute variable that have <10% missing.
```{r tidy=TRUE,  echo=FALSE, warning=FALSE, message=FALSE}
readfile <- file.path(dir,"Data/VTEPredictionForGlio_DATA_LABELS_2020-05-22_2202.csv")
labeldat <- read_csv(readfile, na = "Dont know")  #Export the labeled data
rawdat <- read_csv(file.path(dir, "Data/VTEPredictionForGlio_DATA_2020-05-22_2202.csv"), na = "Dont know" )  #raw data for names
namesFile <- tibble(names(labeldat), names(rawdat)) %>%
dplyr::rename(Field = `names(labeldat)`, exportName = `names(rawdat)`)   #get pretty names for variables
#get the names and merge them with the labeled data
namesfinal <- names(rawdat)
names(labeldat) <- namesfinal  # replace names on the labeldat file
```
\vspace{8mm}
\textbf{Data}\
\vspace{2mm}
`r gsub(".*Data/","",readfile)` \
\vspace{1mm}
`r tools::md5sum(readfile)`
```{r echo=FALSE, message = FALSE}
##======== clean data and get variables of interest ============#
## Variables that were analyzed before but no longer collected ===#
# "Podoplanin", "TF_MP",
#
# "ATRX", "PIK3CA", "TP53", "MYCN",  "Braf" ,"NRAS", "TERT", "PTEN", "CDKN2a", "CDKN2b", "CDK6", "RB1",  "NF1", "NOTCH", "JAK2", "CIC", "PDGFR"
#
# "Histology", "WHO_grade",  "VTE_history","length_hospital_stay",  "CAD", "Afib", "HLD", "DM",   "PAD", "PCI", "OSA", "gout", "CKD", "HITT",
#
basevars <- c("age_diag_orig", "sex", "bmi_diag_orig", "race", "ethnicity", "smoking_diag_orig", "plt_diag_orig", "wbc_diag_orig", "hg_diag_orig", "med_hx_htn", "med_hx_hlp", "med_hx_asthma", "med_hx_hthyr", "med_hx_vte", "med_hx_bcd", "mm_idh", "mm_1p19q_codel", "mm_mgmt_meth", "mm_egfr_ampmut", "tmz_orig", "rt_orig", "bev_orig", "who_surg_orig", "hist_surg_orig", "los_surg_orig")
vtevars <- c("date_lfu", "status_lfu", "n_surg_recur", "dt_surg_orig", "dt_surg_recur_1", "dt_surg_recur_2", "dt_surg_recur_3", "num_vte",  "dt_vte_1",  "dt_vte_2", "dt_vte_3", "dt_vte_4")
# date surgery for original tumor (dt_surg_orig)
#date first VTE (dt_vte_1)
# VTE (yes/no or 1/0)  #no variable in the data need to create
#===================================================================#
#============ Update Smoking to be Current yes/no  =================#
#===================================================================#
dat2 <- labeldat %>% dplyr::select(record_id, basevars, vtevars) %>%
dplyr::mutate(who_surg_orig = as.character(who_surg_orig)) %>%
dplyr::mutate(Smoker = ifelse(smoking_diag_orig == "Current smoker", "Current", "Never or Former"),
plt_diag_orig = plt_diag_orig/10,
wbc_diag_orig = wbc_diag_orig/10,
who_surg_orig = dplyr::recode(who_surg_orig, !!!c("2" = "II" , "3" = "III", "4" = "IV"))) %>%  #* scale WBC and platelet by 10
dplyr::select(-smoking_diag_orig) %>%
dplyr::mutate(sex = factor(sex, levels = c("Male","Female")),
race = factor(race, levels = c("White","Black or African American","Asian", "American Indian or Alaska Native","Native Hawaiian or Other Pacific Islander","Multiracial","Other")),
ethnicity = factor(ethnicity, levels = c("Hispanic or Latino","Non-Hispanic or Non-Latino")),
Smoker = factor(Smoker, levels = c("Never or Former","Current")),
med_hx_htn = factor(med_hx_htn, levels = c("No","Yes")),
med_hx_hlp = factor(med_hx_hlp, levels = c("No","Yes")),
med_hx_asthma = factor(med_hx_asthma, levels = c("No","Yes")),
med_hx_hthyr = factor(med_hx_hthyr, levels = c("No","Yes")),
med_hx_vte = factor(med_hx_vte, levels = c("No","Yes")),
med_hx_bcd = factor(med_hx_bcd, levels = c("No","Yes")),
mm_idh = factor(mm_idh, levels = c("No","Yes")),
mm_1p19q_codel = factor(mm_1p19q_codel, levels = c("No","Yes")),
mm_mgmt_meth = factor(mm_mgmt_meth, levels =c("No","Yes")),
mm_egfr_ampmut = factor(mm_egfr_ampmut, levels = c("No","Yes")),
tmz_orig = factor(tmz_orig, levels = c("No","Yes")),
rt_orig = factor(rt_orig, levels = c("No","Yes")),
bev_orig = factor(bev_orig, levels = c("No","Yes")),
med_hx_bcd = factor(med_hx_bcd, levels = c("No","Yes")),
who_surg_orig = factor(who_surg_orig),
hist_surg_orig = factor(hist_surg_orig, levels = c("Astrocytoma (includes glioblastoma)", "Oligodendroglioma"))) %>%
dplyr::rename(Subject = record_id, Age = age_diag_orig, Sex = sex, BMI = bmi_diag_orig,
Race = race, Ethnicity = ethnicity,
"Platelet_count" = plt_diag_orig, "WBCcount" = wbc_diag_orig,
Hemoglobin = hg_diag_orig, Hypertension = med_hx_htn,"Hyperlipidemia" = med_hx_hlp,
"Asthma" = med_hx_asthma, "Hypothyroidism" = med_hx_hthyr,  "History_VTE" = med_hx_vte,
"Blood_coagulation_disorder" = med_hx_bcd, "IDH" = mm_idh,
"codeletion_1p19q" = mm_1p19q_codel, "MGMT" =mm_mgmt_meth,
"EGFR" =mm_egfr_ampmut , Temozolomide = tmz_orig, Radiotherapy = rt_orig,
Bevacizumab = bev_orig, WHOgrade = who_surg_orig, Histology = hist_surg_orig, Length_Hospital_Stay = los_surg_orig )
# dat2 %>% dplyr::select(Subject, n_surg_recur, num_vte, dt_surg_orig, dt_surg_recur_1, dt_vte_1, VTE1priorRecur) %>% head(15) %>% print(n=Inf)
cleanBaseVars <- c("Age", "Sex", "Race", "Ethnicity", "WHOgrade", "Histology", "Smoker", "Length_Hospital_Stay",
"BMI", "History_VTE", "Radiotherapy", "Temozolomide", "Bevacizumab", "Hemoglobin", "Platelet_count",
"WBCcount", "Hypertension", "Hyperlipidemia", "Asthma", "Hypothyroidism", "Blood_coagulation_disorder",
"IDH", "codeletion_1p19q", "MGMT", "EGFR")
```
```{r}
#====== Survival endpoints =========#
dat3 <- dat2 %>%
dplyr::mutate(VTE1priorRecur = as.Date(ifelse(dt_vte_1 < dt_surg_recur_1 | is.na(dt_surg_recur_1), dt_vte_1, NA), origin = "1970-01-01")) %>%
dplyr::mutate(Death = ifelse(status_lfu == "Deceased", 1, 0),
iVTE = ifelse(!is.na(VTE1priorRecur), 1, 0),
VTEnew = as.Date(ifelse(!is.na(VTE1priorRecur), VTE1priorRecur, date_lfu), origin = "1970-01-01"),
VTE_months = as.numeric(VTEnew - dt_surg_orig) / 365.25 * 12)
# kable(dat3 %>% dplyr::select(Subject, Surgery = dt_surg_orig, "VTE1"= dt_vte_1  , "Surgery Recur1"= dt_surg_recur_1, "Follow-Up" = date_lfu, iVTE, VTEnew, "VTE (months)"=  VTE_months) %>% head()
# , "latex", booktabs = TRUE, caption = "Snapshot of time-to-event endpoints") %>%
#   kable_styling(latex_options = c("striped", "scale_down")) %>%
#   footnote(general = "VTE(months) will be used as the time-to-event variable with iVTE as the indicator for whether VTE was observed.",general_title="", threeparttable = TRUE)
#patient with VTEdate before surgery
issue <- dat3 %>% dplyr::select(Subject, status_lfu, date_lfu, dt_surg_orig, iVTE, VTE_months) %>% dplyr::filter(VTE_months < 0)
issushow <- issue %>% dplyr::mutate(dt_surg_orig = as.character(dt_surg_orig), date_lfu = as.character(date_lfu))
# kable(issushow, booktabs = TRUE,longtable = TRUE, caption = "VTE date prior to surgery date") %>%
#   kable_styling(latex_options = c("HOLD_position","striped")) %>%
#   footnote(general = "Filter out these subjects with VTE date prior to surgery date in the analyses.",general_title="", threeparttable = TRUE)
```
## Analysis Population
```{r}
###=== Remove subjects that had negative VTEmonths since surgery date is after VTE
analysis <- dat3 %>%
dplyr::filter(VTE_months > 0) %>%
dplyr::select(-VTE1priorRecur, -VTEnew)
pcadatRAW <- analysis %>%
dplyr::mutate(VTE = dplyr::recode(iVTE, !!!c("1" = "Yes VTE", "0"= "No VTE")),
Sex_num = dplyr::recode(Sex , !!!c("Male" = 1,  "Female" = 0)),
Hypertension_num = dplyr::recode(Hypertension, !!!c("Yes" = 1,  "No" = 0)),
Hypothyroidism_num = dplyr::recode(Hypothyroidism, !!!c("Yes" = 1,  "No" = 0)),
IDH_num = dplyr::recode(IDH, !!!c("Yes" = 1,  "No" = 0)),
MGMT_num = dplyr::recode(MGMT, !!!c("Yes" = 1, "No" = 0)),
Temozolomide_num = dplyr::recode(Temozolomide, !!!c("Yes" = 1,  "No" = 0)),
WHOgrade_char = paste0("Grade ", WHOgrade),
WHOgrade_num = ifelse(WHOgrade == "II", 2,
ifelse(WHOgrade == "III", 3,
ifelse(WHOgrade == "IV", 4, NA))))
library(missMDA)
cont_predvars <- c("Age", "BMI", "Sex_num", "WBCcount", "Platelet_count", "Hypertension_num", "Hypothyroidism_num", "IDH_num", "MGMT_num", "Temozolomide_num", "WHOgrade_num")
imputePCAout <- imputePCA(as.data.frame(pcadatRAW[,cont_predvars]), method = "EM", ncp=2)  #impute missing values
pca <- prcomp(imputePCAout$completeObs, center = TRUE, scale. = TRUE)  #get pca object
pcpoints <- data.frame(pcadatRAW$VTE, pca$x)
pcout <- summary(pca)$importance
PCAplotData <- list(pcpoints = pcpoints, pcout = pcout)
save(PCAplotData, file= file.path(dir, "/Results/outputfor_RShiny/PCApoints.rda"))
# if(!require(shiny)){
#   install.packages("shiny")
#   library(shiny)
# }
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(tidyverse)
library(plotly)
#library(riskRegression)
library(survival)
library(survminer)
#library(pec)   #for predictSurvProb()
#==========================================================#
#===============        Read in data             ==========#
#==========================================================#
dir <- "/Volumes/fsmresfiles/PrevMed/Projects/Brain_SPORE_BB_Core/Projects/Horbinski/Thrombosis/Code/VTEpredictionGlioma/"
#load in the objects
load(file.path(dir, "predict_VTE_app/VTE_KMplot.rda")) #KM plot "ggsurv1" and "kmplotdat"
#load(file.path(dir, "predict_VTE_app/pcaVTE_VTE.rda")) #pca VTE column "pcaVTE"
load(file.path(dir, "predict_VTE_app/VTE_pcaplot.rda")) #pca plot "pcaplot"
load(file.path(dir, "predict_VTE_app/PCApoints.rda"))  #pcpoints and pcout
str(PCAplotData)
pcpoints <- PCAplotData$pcpoints
pcout <- PCAplotData$pcout
plot_ly(pcpoints, x=~PC1, y=~PC2, z=~PC3,
color = ~pcadatRAW.VTE) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = paste0("PC1 (", round(pcout["Proportion of Variance", "PC1"] *100,1) , "%)")),
yaxis = list(title = paste0("PC2 (", round(pcout["Proportion of Variance", "PC2"] *100,1) , "%)")),
zaxis = list(title = paste0("PC3 (", round(pcout["Proportion of Variance", "PC3"] *100,1) , "%)"))))
q(save = 'no')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
q(save = 'no')
shiny::runApp()
runApp()
?req
q(save = 'no')
shiny::runApp()
library("rsconnect")
rsconnect::setAccountInfo(name='kbellburdett',
token='AFA23A26624938908F444A6D69055871',
secret='Lph8MDx1ALGv9fZev72Q+sjPnZBRnQvejO9pdxAu')
deployApp("/Volumes/fsmresfiles/PrevMed/Projects/Brain_SPORE_BB_Core/Projects/Horbinski/Thrombosis/Code/VTEpredictionGlioma/predict_VTE_app",
appName = "GliomaPredictVTE",
appTitle = "VTE Prediction for Glioma Patients",
launch.browser = FALSE,
forceUpdate = TRUE)
runApp()
library("rsconnect")
rsconnect::setAccountInfo(name='kbellburdett',
token='AFA23A26624938908F444A6D69055871',
secret='Lph8MDx1ALGv9fZev72Q+sjPnZBRnQvejO9pdxAu')
deployApp("/Volumes/fsmresfiles/PrevMed/Projects/Brain_SPORE_BB_Core/Projects/Horbinski/Thrombosis/Code/VTEpredictionGlioma/predict_VTE_app",
appName = "GliomaPredictVTE",
appTitle = "VTE Prediction for Glioma Patients",
launch.browser = FALSE,
forceUpdate = TRUE)
library("rsconnect")
rsconnect::setAccountInfo(name='kbellburdett',
token='AFA23A26624938908F444A6D69055871',
secret='Lph8MDx1ALGv9fZev72Q+sjPnZBRnQvejO9pdxAu')
deployApp("/Volumes/fsmresfiles/PrevMed/Projects/Brain_SPORE_BB_Core/Projects/Horbinski/Thrombosis/Code/VTEpredictionGlioma/predict_VTE_app",
appName = "GliomaPredictVTE",
appTitle = "VTE Prediction for Glioma Patients",
launch.browser = FALSE,
forceUpdate = TRUE)
runApp()
q(save = 'no')
shiny::runApp()
library("rsconnect")
rsconnect::setAccountInfo(name='kbellburdett',
token='AFA23A26624938908F444A6D69055871',
secret='Lph8MDx1ALGv9fZev72Q+sjPnZBRnQvejO9pdxAu')
deployApp("/Volumes/fsmresfiles/PrevMed/Projects/Brain_SPORE_BB_Core/Projects/Horbinski/Thrombosis/Code/VTEpredictionGlioma/predict_VTE_app",
appName = "GliomaPredictVTE",
appTitle = "VTE Prediction for Glioma Patients",
launch.browser = FALSE,
forceUpdate = TRUE)
runApp()
library("rsconnect")
rsconnect::setAccountInfo(name='kbellburdett',
token='AFA23A26624938908F444A6D69055871',
secret='Lph8MDx1ALGv9fZev72Q+sjPnZBRnQvejO9pdxAu')
deployApp("/Volumes/fsmresfiles/PrevMed/Projects/Brain_SPORE_BB_Core/Projects/Horbinski/Thrombosis/Code/VTEpredictionGlioma/predict_VTE_app",
appName = "GliomaPredictVTE",
appTitle = "VTE Prediction for Glioma Patients",
launch.browser = FALSE,
forceUpdate = TRUE)
install.packages("foreign")
install.packages("foreign")
remove.packages("foreign")
install.packages("foreign")
library(foreign)
library("rsconnect")
sessionInfo()
deployApp("/Volumes/fsmresfiles/PrevMed/Projects/Brain_SPORE_BB_Core/Projects/Horbinski/Thrombosis/Code/VTEpredictionGlioma/predict_VTE_app",
appName = "GliomaPredictVTE",
appTitle = "VTE Prediction for Glioma Patients",
launch.browser = FALSE,
forceUpdate = TRUE)
shiny::runApp()
runApp()
runApp()
sessionInfo()
q(save='no')
